local YarhimUI = {}
YarhimUI.__index = YarhimUI

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")

local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")

-- Library Variables
local Library = {}
local Notifications = {}

-- Tween Info
local TweenInfo1 = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local TweenInfo2 = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

function YarhimUI:CreateWindow(WindowSettings)
    WindowSettings = WindowSettings or {}
    local WindowTitle = WindowSettings.Title or "Yarhim UI"
    local WindowSize = WindowSettings.Size or UDim2.new(0, 500, 0, 350)
    
    -- Main ScreenGui
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "YarhimUI"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Try to parent to CoreGui, fallback to PlayerGui
    local success = pcall(function()
        ScreenGui.Parent = CoreGui
    end)
    if not success then
        ScreenGui.Parent = PlayerGui
    end
    
    -- Main Frame
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = WindowSize
    MainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    MainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = ScreenGui
    
    -- Corner for Main Frame
    local MainCorner = Instance.new("UICorner")
    MainCorner.CornerRadius = UDim.new(0, 8)
    MainCorner.Parent = MainFrame
    
    -- Top Bar
    local TopBar = Instance.new("Frame")
    TopBar.Name = "TopBar"
    TopBar.Size = UDim2.new(1, 0, 0, 40)
    TopBar.Position = UDim2.new(0, 0, 0, 0)
    TopBar.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
    TopBar.BorderSizePixel = 0
    TopBar.Parent = MainFrame
    
    -- Top Bar Corner
    local TopCorner = Instance.new("UICorner")
    TopCorner.CornerRadius = UDim.new(0, 8)
    TopCorner.Parent = TopBar
    
    -- Fix corner overlap
    local TopFix = Instance.new("Frame")
    TopFix.Size = UDim2.new(1, 0, 0, 8)
    TopFix.Position = UDim2.new(0, 0, 1, -8)
    TopFix.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
    TopFix.BorderSizePixel = 0
    TopFix.Parent = TopBar
    
    -- Title Label
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "Title"
    TitleLabel.Size = UDim2.new(1, -100, 1, 0)
    TitleLabel.Position = UDim2.new(0, 15, 0, 0)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Text = WindowTitle
    TitleLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    TitleLabel.TextSize = 16
    TitleLabel.Font = Enum.Font.GothamBold
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Parent = TopBar
    
    -- Minimize Button
    local MinimizeBtn = Instance.new("TextButton")
    MinimizeBtn.Name = "MinimizeBtn"
    MinimizeBtn.Size = UDim2.new(0, 35, 0, 25)
    MinimizeBtn.Position = UDim2.new(1, -75, 0.5, -12.5)
    MinimizeBtn.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
    MinimizeBtn.Text = "−"
    MinimizeBtn.TextColor3 = Color3.fromRGB(200, 200, 200)
    MinimizeBtn.TextSize = 18
    MinimizeBtn.Font = Enum.Font.GothamBold
    MinimizeBtn.BorderSizePixel = 0
    MinimizeBtn.Parent = TopBar
    
    local MinCorner = Instance.new("UICorner")
    MinCorner.CornerRadius = UDim.new(0, 4)
    MinCorner.Parent = MinimizeBtn
    
    -- Close Button
    local CloseBtn = Instance.new("TextButton")
    CloseBtn.Name = "CloseBtn"
    CloseBtn.Size = UDim2.new(0, 35, 0, 25)
    CloseBtn.Position = UDim2.new(1, -35, 0.5, -12.5)
    CloseBtn.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    CloseBtn.Text = "×"
    CloseBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseBtn.TextSize = 18
    CloseBtn.Font = Enum.Font.GothamBold
    CloseBtn.BorderSizePixel = 0
    CloseBtn.Parent = TopBar
    
    local CloseCorner = Instance.new("UICorner")
    CloseCorner.CornerRadius = UDim.new(0, 4)
    CloseCorner.Parent = CloseBtn
    
    -- Tab Container
    local TabContainer = Instance.new("Frame")
    TabContainer.Name = "TabContainer"
    TabContainer.Size = UDim2.new(0, 150, 1, -50)
    TabContainer.Position = UDim2.new(0, 10, 0, 45)
    TabContainer.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
    TabContainer.BorderSizePixel = 0
    TabContainer.Parent = MainFrame
    
    local TabCorner = Instance.new("UICorner")
    TabCorner.CornerRadius = UDim.new(0, 6)
    TabCorner.Parent = TabContainer
    
    -- Tab List
    local TabList = Instance.new("ScrollingFrame")
    TabList.Name = "TabList"
    TabList.Size = UDim2.new(1, -10, 1, -10)
    TabList.Position = UDim2.new(0, 5, 0, 5)
    TabList.BackgroundTransparency = 1
    TabList.ScrollBarThickness = 0
    TabList.ScrollingDirection = Enum.ScrollingDirection.Y
    TabList.CanvasSize = UDim2.new(0, 0, 0, 0)
    TabList.Parent = TabContainer
    
    local TabListLayout = Instance.new("UIListLayout")
    TabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabListLayout.Padding = UDim.new(0, 5)
    TabListLayout.Parent = TabList
    
    -- Content Container
    local ContentContainer = Instance.new("Frame")
    ContentContainer.Name = "ContentContainer"
    ContentContainer.Size = UDim2.new(1, -170, 1, -50)
    ContentContainer.Position = UDim2.new(0, 165, 0, 45)
    ContentContainer.BackgroundTransparency = 1
    ContentContainer.Parent = MainFrame
    
    -- Minimize Toggle Button (hidden initially)
    local ToggleBtn = Instance.new("TextButton")
    ToggleBtn.Name = "ToggleBtn"
    ToggleBtn.Size = UDim2.new(0, 100, 0, 30)
    ToggleBtn.Position = UDim2.new(0, 10, 0, 10)
    ToggleBtn.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
    ToggleBtn.Text = "Show " .. WindowTitle
    ToggleBtn.TextColor3 = Color3.fromRGB(200, 200, 200)
    ToggleBtn.TextSize = 12
    ToggleBtn.Font = Enum.Font.Gotham
    ToggleBtn.BorderSizePixel = 0
    ToggleBtn.Visible = false
    ToggleBtn.Parent = ScreenGui
    
    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = UDim.new(0, 4)
    ToggleCorner.Parent = ToggleBtn
    
    -- Dragging functionality
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
    
    -- Minimize/Maximize functionality
    local minimized = false
    
    MinimizeBtn.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            TweenService:Create(MainFrame, TweenInfo1, {Size = UDim2.new(0, 0, 0, 0)}):Play()
            wait(0.3)
            MainFrame.Visible = false
            ToggleBtn.Visible = true
            TweenService:Create(ToggleBtn, TweenInfo2, {Size = UDim2.new(0, 100, 0, 30)}):Play()
        else
            ToggleBtn.Visible = false
            MainFrame.Visible = true
            MainFrame.Size = UDim2.new(0, 0, 0, 0)
            TweenService:Create(MainFrame, TweenInfo1, {Size = WindowSize}):Play()
        end
    end)
    
    ToggleBtn.MouseButton1Click:Connect(function()
        minimized = false
        TweenService:Create(ToggleBtn, TweenInfo2, {Size = UDim2.new(0, 0, 0, 0)}):Play()
        wait(0.2)
        ToggleBtn.Visible = false
        MainFrame.Visible = true
        MainFrame.Size = UDim2.new(0, 0, 0, 0)
        TweenService:Create(MainFrame, TweenInfo1, {Size = WindowSize}):Play()
    end)
    
    -- Close functionality
    CloseBtn.MouseButton1Click:Connect(function()
        TweenService:Create(MainFrame, TweenInfo1, {Size = UDim2.new(0, 0, 0, 0)}):Play()
        wait(0.3)
        ScreenGui:Destroy()
    end)
    
    -- Window Object
    local Window = {}
    Window.Tabs = {}
    Window.CurrentTab = nil
    
    function Window:CreateTab(TabSettings)
        TabSettings = TabSettings or {}
        local TabName = TabSettings.Name or "Tab"
        local TabIcon = TabSettings.Icon or ""
        
        -- Tab Button
        local TabBtn = Instance.new("TextButton")
        TabBtn.Name = TabName
        TabBtn.Size = UDim2.new(1, 0, 0, 35)
        TabBtn.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
        TabBtn.Text = (TabIcon ~= "" and TabIcon .. " " or "") .. TabName
        TabBtn.TextColor3 = Color3.fromRGB(150, 150, 150)
        TabBtn.TextSize = 14
        TabBtn.Font = Enum.Font.Gotham
        TabBtn.BorderSizePixel = 0
        TabBtn.Parent = TabList
        
        local TabBtnCorner = Instance.new("UICorner")
        TabBtnCorner.CornerRadius = UDim.new(0, 4)
        TabBtnCorner.Parent = TabBtn
        
        -- Tab Content
        local TabContent = Instance.new("ScrollingFrame")
        TabContent.Name = TabName .. "Content"
        TabContent.Size = UDim2.new(1, 0, 1, 0)
        TabContent.Position = UDim2.new(0, 0, 0, 0)
        TabContent.BackgroundTransparency = 1
        TabContent.ScrollBarThickness = 2
        TabContent.ScrollBarImageColor3 = Color3.fromRGB(80, 80, 80)
        TabContent.ScrollingDirection = Enum.ScrollingDirection.Y
        TabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabContent.Visible = false
        TabContent.Parent = ContentContainer
        
        local ContentLayout = Instance.new("UIListLayout")
        ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        ContentLayout.Padding = UDim.new(0, 8)
        ContentLayout.Parent = TabContent
        
        local ContentPadding = Instance.new("UIPadding")
        ContentPadding.PaddingTop = UDim.new(0, 10)
        ContentPadding.PaddingLeft = UDim.new(0, 10)
        ContentPadding.PaddingRight = UDim.new(0, 10)
        ContentPadding.PaddingBottom = UDim.new(0, 10)
        ContentPadding.Parent = TabContent
        
        -- Tab functionality
        TabBtn.MouseButton1Click:Connect(function()
            -- Hide all tabs
            for _, tab in pairs(Window.Tabs) do
                tab.Content.Visible = false
                tab.Button.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
                tab.Button.TextColor3 = Color3.fromRGB(150, 150, 150)
            end
            
            -- Show current tab
            TabContent.Visible = true
            TabBtn.BackgroundColor3 = Color3.fromRGB(50, 120, 200)
            TabBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
            Window.CurrentTab = TabName
        end)
        
        -- Auto-select first tab
        if #Window.Tabs == 0 then
            TabContent.Visible = true
            TabBtn.BackgroundColor3 = Color3.fromRGB(50, 120, 200)
            TabBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
            Window.CurrentTab = TabName
        end
        
        -- Update canvas size
        ContentLayout.Changed:Connect(function()
            TabContent.CanvasSize = UDim2.new(0, 0, 0, ContentLayout.AbsoluteContentSize.Y + 20)
        end)
        
        -- Update tab list canvas size
        TabListLayout.Changed:Connect(function()
            TabList.CanvasSize = UDim2.new(0, 0, 0, TabListLayout.AbsoluteContentSize.Y + 10)
        end)
        
        local Tab = {
            Button = TabBtn,
            Content = TabContent,
            Layout = ContentLayout
        }
        
        Window.Tabs[TabName] = Tab
        table.insert(Window.Tabs, Tab)
        
        -- Tab Elements
        function Tab:CreateButton(ButtonSettings)
            ButtonSettings = ButtonSettings or {}
            local ButtonText = ButtonSettings.Text or "Button"
            local Callback = ButtonSettings.Callback or function() end
            
            local Button = Instance.new("TextButton")
            Button.Name = "Button"
            Button.Size = UDim2.new(1, -20, 0, 35)
            Button.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
            Button.Text = ButtonText
            Button.TextColor3 = Color3.fromRGB(200, 200, 200)
            Button.TextSize = 14
            Button.Font = Enum.Font.Gotham
            Button.BorderSizePixel = 0
            Button.Parent = TabContent
            
            local ButtonCorner = Instance.new("UICorner")
            ButtonCorner.CornerRadius = UDim.new(0, 4)
            ButtonCorner.Parent = Button
            
            -- Button effects
            Button.MouseEnter:Connect(function()
                TweenService:Create(Button, TweenInfo2, {BackgroundColor3 = Color3.fromRGB(50, 50, 55)}):Play()
            end)
            
            Button.MouseLeave:Connect(function()
                TweenService:Create(Button, TweenInfo2, {BackgroundColor3 = Color3.fromRGB(40, 40, 45)}):Play()
            end)
            
            Button.MouseButton1Click:Connect(function()
                TweenService:Create(Button, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(60, 60, 65)}):Play()
                wait(0.1)
                TweenService:Create(Button, TweenInfo2, {BackgroundColor3 = Color3.fromRGB(40, 40, 45)}):Play()
                Callback()
            end)
            
            return Button
        end
        
        function Tab:CreateToggle(ToggleSettings)
            ToggleSettings = ToggleSettings or {}
            local ToggleText = ToggleSettings.Text or "Toggle"
            local DefaultValue = ToggleSettings.Default or false
            local Callback = ToggleSettings.Callback or function() end
            
            local ToggleFrame = Instance.new("Frame")
            ToggleFrame.Name = "ToggleFrame"
            ToggleFrame.Size = UDim2.new(1, -20, 0, 35)
            ToggleFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
            ToggleFrame.BorderSizePixel = 0
            ToggleFrame.Parent = TabContent
            
            local ToggleCorner = Instance.new("UICorner")
            ToggleCorner.CornerRadius = UDim.new(0, 4)
            ToggleCorner.Parent = ToggleFrame
            
            local ToggleLabel = Instance.new("TextLabel")
            ToggleLabel.Size = UDim2.new(1, -50, 1, 0)
            ToggleLabel.Position = UDim2.new(0, 10, 0, 0)
            ToggleLabel.BackgroundTransparency = 1
            ToggleLabel.Text = ToggleText
            ToggleLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
            ToggleLabel.TextSize = 14
            ToggleLabel.Font = Enum.Font.Gotham
            ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
            ToggleLabel.Parent = ToggleFrame
            
            local ToggleButton = Instance.new("TextButton")
            ToggleButton.Size = UDim2.new(0, 35, 0, 20)
            ToggleButton.Position = UDim2.new(1, -40, 0.5, -10)
            ToggleButton.BackgroundColor3 = DefaultValue and Color3.fromRGB(50, 120, 200) or Color3.fromRGB(60, 60, 65)
            ToggleButton.Text = ""
            ToggleButton.BorderSizePixel = 0
            ToggleButton.Parent = ToggleFrame
            
            local ToggleBtnCorner = Instance.new("UICorner")
            ToggleBtnCorner.CornerRadius = UDim.new(0, 10)
            ToggleBtnCorner.Parent = ToggleButton
            
            local ToggleIndicator = Instance.new("Frame")
            ToggleIndicator.Size = UDim2.new(0, 16, 0, 16)
            ToggleIndicator.Position = DefaultValue and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
            ToggleIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            ToggleIndicator.BorderSizePixel = 0
            ToggleIndicator.Parent = ToggleButton
            
            local IndicatorCorner = Instance.new("UICorner")
            IndicatorCorner.CornerRadius = UDim.new(0, 8)
            IndicatorCorner.Parent = ToggleIndicator
            
            local toggled = DefaultValue
            
            ToggleButton.MouseButton1Click:Connect(function()
                toggled = not toggled
                
                if toggled then
                    TweenService:Create(ToggleButton, TweenInfo2, {BackgroundColor3 = Color3.fromRGB(50, 120, 200)}):Play()
                    TweenService:Create(ToggleIndicator, TweenInfo2, {Position = UDim2.new(1, -18, 0.5, -8)}):Play()
                else
                    TweenService:Create(ToggleButton, TweenInfo2, {BackgroundColor3 = Color3.fromRGB(60, 60, 65)}):Play()
                    TweenService:Create(ToggleIndicator, TweenInfo2, {Position = UDim2.new(0, 2, 0.5, -8)}):Play()
                end
                
                Callback(toggled)
            end)
            
            return ToggleFrame, toggled
        end
        
        function Tab:CreateSlider(SliderSettings)
            SliderSettings = SliderSettings or {}
            local SliderText = SliderSettings.Text or "Slider"
            local MinValue = SliderSettings.Min or 0
            local MaxValue = SliderSettings.Max or 100
            local DefaultValue = SliderSettings.Default or MinValue
            local Increment = SliderSettings.Increment or 1
            local Callback = SliderSettings.Callback or function() end
            
            local SliderFrame = Instance.new("Frame")
            SliderFrame.Name = "SliderFrame"
            SliderFrame.Size = UDim2.new(1, -20, 0, 50)
            SliderFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
            SliderFrame.BorderSizePixel = 0
            SliderFrame.Parent = TabContent
            
            local SliderCorner = Instance.new("UICorner")
            SliderCorner.CornerRadius = UDim.new(0, 4)
            SliderCorner.Parent = SliderFrame
            
            local SliderLabel = Instance.new("TextLabel")
            SliderLabel.Size = UDim2.new(0.7, 0, 0, 20)
            SliderLabel.Position = UDim2.new(0, 10, 0, 5)
            SliderLabel.BackgroundTransparency = 1
            SliderLabel.Text = SliderText
            SliderLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
            SliderLabel.TextSize = 14
            SliderLabel.Font = Enum.Font.Gotham
            SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
            SliderLabel.Parent = SliderFrame
            
            local ValueLabel = Instance.new("TextLabel")
            ValueLabel.Size = UDim2.new(0.3, -10, 0, 20)
            ValueLabel.Position = UDim2.new(0.7, 0, 0, 5)
            ValueLabel.BackgroundTransparency = 1
            ValueLabel.Text = tostring(DefaultValue)
            ValueLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
            ValueLabel.TextSize = 12
            ValueLabel.Font = Enum.Font.Gotham
            ValueLabel.TextXAlignment = Enum.TextXAlignment.Right
            ValueLabel.Parent = SliderFrame
            
            local SliderTrack = Instance.new("Frame")
            SliderTrack.Size = UDim2.new(1, -20, 0, 4)
            SliderTrack.Position = UDim2.new(0, 10, 1, -15)
            SliderTrack.BackgroundColor3 = Color3.fromRGB(50, 50, 55)
            SliderTrack.BorderSizePixel = 0
            SliderTrack.Parent = SliderFrame
            
            local TrackCorner = Instance.new("UICorner")
            TrackCorner.CornerRadius = UDim.new(0, 2)
            TrackCorner.Parent = SliderTrack
            
            local SliderFill = Instance.new("Frame")
            SliderFill.Size = UDim2.new((DefaultValue - MinValue) / (MaxValue - MinValue), 0, 1, 0)
            SliderFill.Position = UDim2.new(0, 0, 0, 0)
            SliderFill.BackgroundColor3 = Color3.fromRGB(50, 120, 200)
            SliderFill.BorderSizePixel = 0
            SliderFill.Parent = SliderTrack
            
            local FillCorner = Instance.new("UICorner")
            FillCorner.CornerRadius = UDim.new(0, 2)
            FillCorner.Parent = SliderFill
            
            local SliderButton = Instance.new("TextButton")
            SliderButton.Size = UDim2.new(0, 12, 0, 12)
            SliderButton.Position = UDim2.new((DefaultValue - MinValue) / (MaxValue - MinValue), -6, 0.5, -6)
            SliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            SliderButton.Text = ""
            SliderButton.BorderSizePixel = 0
            SliderButton.Parent = SliderTrack
            
            local ButtonCorner = Instance.new("UICorner")
            ButtonCorner.CornerRadius = UDim.new(0, 6)
            ButtonCorner.Parent = SliderButton
            
            local currentValue = DefaultValue
            local dragging = false
            
            local function UpdateSlider(value)
                value = math.max(MinValue, math.min(MaxValue, value))
                value = math.floor(value / Increment + 0.5) * Increment
                currentValue = value
                
                local percentage = (value - MinValue) / (MaxValue - MinValue)
                ValueLabel.Text = tostring(value)
                
                TweenService:Create(SliderFill, TweenInfo2, {Size = UDim2.new(percentage, 0, 1, 0)}):Play()
                TweenService:Create(SliderButton, TweenInfo2, {Position = UDim2.new(percentage, -6, 0.5, -6)}):Play()
                
                Callback(value)
            end
            
            SliderButton.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                    local percentage = math.max(0, math.min(1, (input.Position.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X))
                    local value = MinValue + (MaxValue - MinValue) * percentage
                    UpdateSlider(value)
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = false
                end
            end)
            
            SliderTrack.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    local percentage = math.max(0, math.min(1, (input.Position.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X))
                    local value = MinValue + (MaxValue - MinValue) * percentage
                    UpdateSlider(value)
                end
            end)
            
            return SliderFrame, currentValue
        end
        
        function Tab:CreateInput(InputSettings)
            InputSettings = InputSettings or {}
            local InputText = InputSettings.Text or "Input"
            local PlaceholderText = InputSettings.Placeholder or "Enter text..."
            local DefaultValue = InputSettings.Default or ""
            local Callback = InputSettings.Callback or function() end
            
            local InputFrame = Instance.new("Frame")
            InputFrame.Name = "InputFrame"
            InputFrame.Size = UDim2.new(1, -20, 0, 60)
            InputFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
            InputFrame.BorderSizePixel = 0
            InputFrame.Parent = TabContent
            
            local InputCorner = Instance.new("UICorner")
            InputCorner.CornerRadius = UDim.new(0, 4)
            InputCorner.Parent = InputFrame
            
            local InputLabel = Instance.new("TextLabel")
            InputLabel.Size = UDim2.new(1, -20, 0, 20)
            InputLabel.Position = UDim2.new(0, 10, 0, 5)
            InputLabel.BackgroundTransparency = 1
            InputLabel.Text = InputText
            InputLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
            InputLabel.TextSize = 14
            InputLabel.Font = Enum.Font.Gotham
            InputLabel.TextXAlignment = Enum.TextXAlignment.Left
            InputLabel.Parent = InputFrame
            
            local InputBox = Instance.new("TextBox")
            InputBox.Size = UDim2.new(1, -20, 0, 25)
            InputBox.Position = UDim2.new(0, 10, 1, -30)
            InputBox.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
            InputBox.Text = DefaultValue
            InputBox.PlaceholderText = PlaceholderText
            InputBox.TextColor3 = Color3.fromRGB(200, 200, 200)
            InputBox.PlaceholderColor3 = Color3.fromRGB(120, 120, 120)
            InputBox.TextSize = 14
            InputBox.Font = Enum.Font.Gotham
            InputBox.BorderSizePixel = 0
            InputBox.ClearButtonEnabled = false
            InputBox.Parent = InputFrame
            
            local InputBoxCorner = Instance.new("UICorner")
            InputBoxCorner.CornerRadius = UDim.new(0, 4)
            InputBoxCorner.Parent = InputBox
            
            InputBox.FocusLost:Connect(function(enterPressed)
                if enterPressed then
                    Callback(InputBox.Text)
                end
            end)
            
            return InputFrame, InputBox
        end
        
        function Tab:CreateDropdown(DropdownSettings)
            DropdownSettings = DropdownSettings or {}
            local DropdownText = DropdownSettings.Text or "Dropdown"
            local Options = DropdownSettings.Options or {"Option 1", "Option 2", "Option 3"}
            local DefaultValue = DropdownSettings.Default or Options[1]
            local Callback = DropdownSettings.Callback or function() end
            
            local DropdownFrame = Instance.new("Frame")
            DropdownFrame.Name = "DropdownFrame"
            DropdownFrame.Size = UDim2.new(1, -20, 0, 60)
            DropdownFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
            DropdownFrame.BorderSizePixel = 0
            DropdownFrame.Parent = TabContent
            
            local DropdownCorner = Instance.new("UICorner")
            DropdownCorner.CornerRadius = UDim.new(0, 4)
            DropdownCorner.Parent = DropdownFrame
            
            local DropdownLabel = Instance.new("TextLabel")
            DropdownLabel.Size = UDim2.new(1, -20, 0, 20)
            DropdownLabel.Position = UDim2.new(0, 10, 0, 5)
            DropdownLabel.BackgroundTransparency = 1
            DropdownLabel.Text = DropdownText
            DropdownLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
            DropdownLabel.TextSize = 14
            DropdownLabel.Font = Enum.Font.Gotham
            DropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
            DropdownLabel.Parent = DropdownFrame
            
            local DropdownButton = Instance.new("TextButton")
            DropdownButton.Size = UDim2.new(1, -20, 0, 25)
            DropdownButton.Position = UDim2.new(0, 10, 1, -30)
            DropdownButton.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
            DropdownButton.Text = DefaultValue .. " ▼"
            DropdownButton.TextColor3 = Color3.fromRGB(200, 200, 200)
            DropdownButton.TextSize = 14
            DropdownButton.Font = Enum.Font.Gotham
            DropdownButton.BorderSizePixel = 0
            DropdownButton.Parent = DropdownFrame
            
            local DropdownBtnCorner = Instance.new("UICorner")
            DropdownBtnCorner.CornerRadius = UDim.new(0, 4)
            DropdownBtnCorner.Parent = DropdownButton
            
            local DropdownList = Instance.new("Frame")
            DropdownList.Size = UDim2.new(1, -20, 0, #Options * 25)
            DropdownList.Position = UDim2.new(0, 10, 1, 5)
            DropdownList.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
            DropdownList.BorderSizePixel = 0
            DropdownList.Visible = false
            DropdownList.ZIndex = 10
            DropdownList.Parent = DropdownFrame
            
            local DropdownListCorner = Instance.new("UICorner")
            DropdownListCorner.CornerRadius = UDim.new(0, 4)
            DropdownListCorner.Parent = DropdownList
            
            local ListLayout = Instance.new("UIListLayout")
            ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            ListLayout.Parent = DropdownList
            
            local currentValue = DefaultValue
            local isOpen = false
            
            for i, option in ipairs(Options) do
                local OptionButton = Instance.new("TextButton")
                OptionButton.Size = UDim2.new(1, 0, 0, 25)
                OptionButton.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
                OptionButton.Text = option
                OptionButton.TextColor3 = Color3.fromRGB(180, 180, 180)
                OptionButton.TextSize = 13
                OptionButton.Font = Enum.Font.Gotham
                OptionButton.BorderSizePixel = 0
                OptionButton.Parent = DropdownList
                
                OptionButton.MouseEnter:Connect(function()
                    OptionButton.BackgroundColor3 = Color3.fromRGB(45, 45, 50)
                end)
                
                OptionButton.MouseLeave:Connect(function()
                    OptionButton.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
                end)
                
                OptionButton.MouseButton1Click:Connect(function()
                    currentValue = option
                    DropdownButton.Text = option .. " ▼"
                    DropdownList.Visible = false
                    isOpen = false
                    
                    -- Resize dropdown frame back
                    TweenService:Create(DropdownFrame, TweenInfo2, {Size = UDim2.new(1, -20, 0, 60)}):Play()
                    
                    Callback(option)
                end)
            end
            
            DropdownButton.MouseButton1Click:Connect(function()
                isOpen = not isOpen
                DropdownList.Visible = isOpen
                
                if isOpen then
                    DropdownButton.Text = currentValue .. " ▲"
                    -- Expand dropdown frame
                    TweenService:Create(DropdownFrame, TweenInfo2, {Size = UDim2.new(1, -20, 0, 60 + #Options * 25 + 5)}):Play()
                else
                    DropdownButton.Text = currentValue .. " ▼"
                    -- Collapse dropdown frame
                    TweenService:Create(DropdownFrame, TweenInfo2, {Size = UDim2.new(1, -20, 0, 60)}):Play()
                end
            end)
            
            return DropdownFrame, currentValue
        end
        
        return Tab
    end
    
    -- Notification System
    function Window:CreateNotification(NotificationSettings)
        NotificationSettings = NotificationSettings or {}
        local Title = NotificationSettings.Title or "Notification"
        local Description = NotificationSettings.Description or "This is a notification"
        local Duration = NotificationSettings.Duration or 3
        local Type = NotificationSettings.Type or "Info" -- Info, Success, Warning, Error
        
        local NotificationFrame = Instance.new("Frame")
        NotificationFrame.Size = UDim2.new(0, 300, 0, 80)
        NotificationFrame.Position = UDim2.new(1, 10, 0, 10 + (#Notifications * 90))
        NotificationFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
        NotificationFrame.BorderSizePixel = 0
        NotificationFrame.Parent = ScreenGui
        
        local NotificationCorner = Instance.new("UICorner")
        NotificationCorner.CornerRadius = UDim.new(0, 6)
        NotificationCorner.Parent = NotificationFrame
        
        -- Color bar based on type
        local ColorBar = Instance.new("Frame")
        ColorBar.Size = UDim2.new(0, 4, 1, 0)
        ColorBar.Position = UDim2.new(0, 0, 0, 0)
        ColorBar.BorderSizePixel = 0
        ColorBar.Parent = NotificationFrame
        
        local ColorBarCorner = Instance.new("UICorner")
        ColorBarCorner.CornerRadius = UDim.new(0, 2)
        ColorBarCorner.Parent = ColorBar
        
        if Type == "Success" then
            ColorBar.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
        elseif Type == "Warning" then
            ColorBar.BackgroundColor3 = Color3.fromRGB(200, 200, 50)
        elseif Type == "Error" then
            ColorBar.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
        else
            ColorBar.BackgroundColor3 = Color3.fromRGB(50, 120, 200)
        end
        
        local NotificationTitle = Instance.new("TextLabel")
        NotificationTitle.Size = UDim2.new(1, -50, 0, 25)
        NotificationTitle.Position = UDim2.new(0, 15, 0, 5)
        NotificationTitle.BackgroundTransparency = 1
        NotificationTitle.Text = Title
        NotificationTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
        NotificationTitle.TextSize = 16
        NotificationTitle.Font = Enum.Font.GothamBold
        NotificationTitle.TextXAlignment = Enum.TextXAlignment.Left
        NotificationTitle.Parent = NotificationFrame
        
        local NotificationDesc = Instance.new("TextLabel")
        NotificationDesc.Size = UDim2.new(1, -50, 0, 45)
        NotificationDesc.Position = UDim2.new(0, 15, 0, 25)
        NotificationDesc.BackgroundTransparency = 1
        NotificationDesc.Text = Description
        NotificationDesc.TextColor3 = Color3.fromRGB(180, 180, 180)
        NotificationDesc.TextSize = 13
        NotificationDesc.Font = Enum.Font.Gotham
        NotificationDesc.TextXAlignment = Enum.TextXAlignment.Left
        NotificationDesc.TextYAlignment = Enum.TextYAlignment.Top
        NotificationDesc.TextWrapped = true
        NotificationDesc.Parent = NotificationFrame
        
        local CloseNotificationBtn = Instance.new("TextButton")
        CloseNotificationBtn.Size = UDim2.new(0, 20, 0, 20)
        CloseNotificationBtn.Position = UDim2.new(1, -25, 0, 5)
        CloseNotificationBtn.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
        CloseNotificationBtn.Text = "×"
        CloseNotificationBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
        CloseNotificationBtn.TextSize = 14
        CloseNotificationBtn.Font = Enum.Font.GothamBold
        CloseNotificationBtn.BorderSizePixel = 0
        CloseNotificationBtn.Parent = NotificationFrame
        
        local CloseNotificationCorner = Instance.new("UICorner")
        CloseNotificationCorner.CornerRadius = UDim.new(0, 3)
        CloseNotificationCorner.Parent = CloseNotificationBtn
        
        table.insert(Notifications, NotificationFrame)
        
        -- Slide in animation
        TweenService:Create(NotificationFrame, TweenInfo1, {Position = UDim2.new(1, -310, 0, 10 + ((#Notifications - 1) * 90))}):Play()
        
        -- Auto close after duration
        local function CloseNotification()
            TweenService:Create(NotificationFrame, TweenInfo1, {Position = UDim2.new(1, 10, 0, NotificationFrame.Position.Y.Offset)}):Play()
            wait(0.3)
            
            -- Remove from table
            for i, notif in ipairs(Notifications) do
                if notif == NotificationFrame then
                    table.remove(Notifications, i)
                    break
                end
            end
            
            NotificationFrame:Destroy()
            
            -- Reposition remaining notifications
            for i, notif in ipairs(Notifications) do
                TweenService:Create(notif, TweenInfo2, {Position = UDim2.new(1, -310, 0, 10 + ((i - 1) * 90))}):Play()
            end
        end
        
        CloseNotificationBtn.MouseButton1Click:Connect(CloseNotification)
        
        spawn(function()
            wait(Duration)
            if NotificationFrame.Parent then
                CloseNotification()
            end
        end)
    end
    
    return Window
end

-- Usage Example and Return
local function CreateUI()
    return YarhimUI
end

return CreateUI()
