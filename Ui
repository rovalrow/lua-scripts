-- Roblox UI Library
-- Compatible with PC and Mobile

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")

local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")

local UILibrary = {}

-- Create main ScreenGui
local function CreateScreenGui()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "UILibrary"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.Parent = PlayerGui
    return screenGui
end

-- Create main window
function UILibrary:CreateWindow(title, subtitle)
    local screenGui = CreateScreenGui()
    
    -- Main Frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 800, 0, 500)
    mainFrame.Position = UDim2.new(0.5, -400, 0.5, -250)
    mainFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    mainFrame.BackgroundTransparency = 0.3
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    
    -- Corner rounding
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 15)
    corner.Parent = mainFrame
    
    -- Header
    local header = Instance.new("Frame")
    header.Name = "Header"
    header.Size = UDim2.new(1, 0, 0, 80)
    header.Position = UDim2.new(0, 0, 0, 0)
    header.BackgroundTransparency = 1
    header.Parent = mainFrame
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(1, -40, 0, 35)
    titleLabel.Position = UDim2.new(0, 20, 0, 15)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title or "Welcome home, GOGO"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextSize = 24
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Parent = header
    
    local subtitleLabel = Instance.new("TextLabel")
    subtitleLabel.Name = "Subtitle"
    subtitleLabel.Size = UDim2.new(1, -40, 0, 20)
    subtitleLabel.Position = UDim2.new(0, 20, 0, 50)
    subtitleLabel.BackgroundTransparency = 1
    subtitleLabel.Text = subtitle or "What's up?"
    subtitleLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    subtitleLabel.TextSize = 16
    subtitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    subtitleLabel.Font = Enum.Font.Gotham
    subtitleLabel.Parent = header
    
    -- Content Area
    local contentFrame = Instance.new("Frame")
    contentFrame.Name = "Content"
    contentFrame.Size = UDim2.new(1, -40, 1, -120)
    contentFrame.Position = UDim2.new(0, 20, 0, 100)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Parent = mainFrame
    
    -- Left Panel
    local leftPanel = Instance.new("Frame")
    leftPanel.Name = "LeftPanel"
    leftPanel.Size = UDim2.new(0.48, 0, 1, 0)
    leftPanel.Position = UDim2.new(0, 0, 0, 0)
    leftPanel.BackgroundColor3 = Color3.fromRGB(45, 90, 39)
    leftPanel.BackgroundTransparency = 0.2
    leftPanel.BorderSizePixel = 0
    leftPanel.Parent = contentFrame
    
    local leftCorner = Instance.new("UICorner")
    leftCorner.CornerRadius = UDim.new(0, 12)
    leftCorner.Parent = leftPanel
    
    -- Right Panel (Friends)
    local rightPanel = Instance.new("Frame")
    rightPanel.Name = "RightPanel"
    rightPanel.Size = UDim2.new(0.48, 0, 1, 0)
    rightPanel.Position = UDim2.new(0.52, 0, 0, 0)
    rightPanel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    rightPanel.BackgroundTransparency = 0.2
    rightPanel.BorderSizePixel = 0
    rightPanel.Parent = contentFrame
    
    local rightCorner = Instance.new("UICorner")
    rightCorner.CornerRadius = UDim.new(0, 12)
    rightCorner.Parent = rightPanel
    
    -- Settings Button
    local settingsButton = Instance.new("ImageButton")
    settingsButton.Name = "SettingsButton"
    settingsButton.Size = UDim2.new(0, 40, 0, 40)
    settingsButton.Position = UDim2.new(1, -60, 1, -60)
    settingsButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    settingsButton.BackgroundTransparency = 0.3
    settingsButton.BorderSizePixel = 0
    settingsButton.Image = "rbxasset://textures/ui/Settings/Help/gear.png"
    settingsButton.ImageColor3 = Color3.fromRGB(255, 255, 255)
    settingsButton.Parent = contentFrame
    
    local settingsCorner = Instance.new("UICorner")
    settingsCorner.CornerRadius = UDim.new(0, 8)
    settingsCorner.Parent = settingsButton
    
    -- Settings Panel (Hidden by default)
    local settingsPanel = Instance.new("Frame")
    settingsPanel.Name = "SettingsPanel"
    settingsPanel.Size = UDim2.new(0, 300, 0, 200)
    settingsPanel.Position = UDim2.new(1, -320, 1, -280)
    settingsPanel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    settingsPanel.BackgroundTransparency = 0.1
    settingsPanel.BorderSizePixel = 0
    settingsPanel.Visible = false
    settingsPanel.Parent = contentFrame
    
    local settingsPanelCorner = Instance.new("UICorner")
    settingsPanelCorner.CornerRadius = UDim.new(0, 12)
    settingsPanelCorner.Parent = settingsPanel
    
    -- Settings Title
    local settingsTitle = Instance.new("TextLabel")
    settingsTitle.Name = "SettingsTitle"
    settingsTitle.Size = UDim2.new(1, -20, 0, 40)
    settingsTitle.Position = UDim2.new(0, 10, 0, 10)
    settingsTitle.BackgroundTransparency = 1
    settingsTitle.Text = "Settings"
    settingsTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    settingsTitle.TextSize = 18
    settingsTitle.TextXAlignment = Enum.TextXAlignment.Left
    settingsTitle.Font = Enum.Font.GothamBold
    settingsTitle.Parent = settingsPanel
    
    local window = {
        ScreenGui = screenGui,
        MainFrame = mainFrame,
        LeftPanel = leftPanel,
        RightPanel = rightPanel,
        SettingsPanel = settingsPanel,
        SettingsButton = settingsButton
    }
    
    -- Settings button animation and toggle
    settingsButton.MouseButton1Click:Connect(function()
        settingsPanel.Visible = not settingsPanel.Visible
        
        local tween = TweenService:Create(
            settingsButton,
            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {Rotation = settingsPanel.Visible and 90 or 0}
        )
        tween:Play()
    end)
    
    return window
end

-- Create Button
function UILibrary:CreateButton(parent, text, callback)
    local button = Instance.new("TextButton")
    button.Name = "UIButton"
    button.Size = UDim2.new(1, -20, 0, 40)
    button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    button.BorderSizePixel = 0
    button.Text = text or "Button"
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 16
    button.Font = Enum.Font.Gotham
    button.Parent = parent
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = button
    
    -- Hover and click animations
    button.MouseEnter:Connect(function()
        local tween = TweenService:Create(
            button,
            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = Color3.fromRGB(60, 60, 60)}
        )
        tween:Play()
    end)
    
    button.MouseLeave:Connect(function()
        local tween = TweenService:Create(
            button,
            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = Color3.fromRGB(40, 40, 40)}
        )
        tween:Play()
    end)
    
    button.MouseButton1Click:Connect(function()
        local tween = TweenService:Create(
            button,
            TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {Size = UDim2.new(1, -22, 0, 38)}
        )
        tween:Play()
        
        wait(0.1)
        
        local tween2 = TweenService:Create(
            button,
            TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {Size = UDim2.new(1, -20, 0, 40)}
        )
        tween2:Play()
        
        if callback then
            callback()
        end
    end)
    
    return button
end

-- Create Toggle Button
function UILibrary:CreateToggle(parent, text, defaultState, callback)
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Name = "ToggleFrame"
    toggleFrame.Size = UDim2.new(1, -20, 0, 50)
    toggleFrame.BackgroundTransparency = 1
    toggleFrame.Parent = parent
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Size = UDim2.new(0.7, 0, 1, 0)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text or "Toggle"
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 16
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.TextYAlignment = Enum.TextYAlignment.Center
    label.Font = Enum.Font.Gotham
    label.Parent = toggleFrame
    
    local toggleButton = Instance.new("TextButton")
    toggleButton.Name = "ToggleButton"
    toggleButton.Size = UDim2.new(0, 60, 0, 30)
    toggleButton.Position = UDim2.new(1, -60, 0.5, -15)
    toggleButton.BackgroundColor3 = defaultState and Color3.fromRGB(76, 175, 80) or Color3.fromRGB(100, 100, 100)
    toggleButton.BorderSizePixel = 0
    toggleButton.Text = ""
    toggleButton.Parent = toggleFrame
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(1, 0)
    toggleCorner.Parent = toggleButton
    
    local toggleCircle = Instance.new("Frame")
    toggleCircle.Name = "Circle"
    toggleCircle.Size = UDim2.new(0, 26, 0, 26)
    toggleCircle.Position = defaultState and UDim2.new(1, -28, 0.5, -13) or UDim2.new(0, 2, 0.5, -13)
    toggleCircle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    toggleCircle.BorderSizePixel = 0
    toggleCircle.Parent = toggleButton
    
    local circleCorner = Instance.new("UICorner")
    circleCorner.CornerRadius = UDim.new(1, 0)
    circleCorner.Parent = toggleCircle
    
    local isToggled = defaultState or false
    
    toggleButton.MouseButton1Click:Connect(function()
        isToggled = not isToggled
        
        local colorTween = TweenService:Create(
            toggleButton,
            TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = isToggled and Color3.fromRGB(76, 175, 80) or Color3.fromRGB(100, 100, 100)}
        )
        
        local positionTween = TweenService:Create(
            toggleCircle,
            TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {Position = isToggled and UDim2.new(1, -28, 0.5, -13) or UDim2.new(0, 2, 0.5, -13)}
        )
        
        colorTween:Play()
        positionTween:Play()
        
        if callback then
            callback(isToggled)
        end
    end)
    
    return toggleFrame, isToggled
end

-- Create Slider
function UILibrary:CreateSlider(parent, text, minValue, maxValue, defaultValue, callback)
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Name = "SliderFrame"
    sliderFrame.Size = UDim2.new(1, -20, 0, 60)
    sliderFrame.BackgroundTransparency = 1
    sliderFrame.Parent = parent
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Size = UDim2.new(1, 0, 0, 20)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text or "Slider"
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 16
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Font = Enum.Font.Gotham
    label.Parent = sliderFrame
    
    local valueLabel = Instance.new("TextLabel")
    valueLabel.Name = "ValueLabel"
    valueLabel.Size = UDim2.new(0, 50, 0, 20)
    valueLabel.Position = UDim2.new(1, -50, 0, 0)
    valueLabel.BackgroundTransparency = 1
    valueLabel.Text = tostring(defaultValue or minValue or 0)
    valueLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    valueLabel.TextSize = 14
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right
    valueLabel.Font = Enum.Font.Gotham
    valueLabel.Parent = sliderFrame
    
    local sliderBar = Instance.new("Frame")
    sliderBar.Name = "SliderBar"
    sliderBar.Size = UDim2.new(1, 0, 0, 8)
    sliderBar.Position = UDim2.new(0, 0, 0, 30)
    sliderBar.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    sliderBar.BorderSizePixel = 0
    sliderBar.Parent = sliderFrame
    
    local sliderCorner = Instance.new("UICorner")
    sliderCorner.CornerRadius = UDim.new(1, 0)
    sliderCorner.Parent = sliderBar
    
    local sliderFill = Instance.new("Frame")
    sliderFill.Name = "Fill"
    sliderFill.Size = UDim2.new(0, 0, 1, 0)
    sliderFill.Position = UDim2.new(0, 0, 0, 0)
    sliderFill.BackgroundColor3 = Color3.fromRGB(76, 175, 80)
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderBar
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(1, 0)
    fillCorner.Parent = sliderFill
    
    local sliderKnob = Instance.new("Frame")
    sliderKnob.Name = "Knob"
    sliderKnob.Size = UDim2.new(0, 16, 0, 16)
    sliderKnob.Position = UDim2.new(0, -8, 0.5, -8)
    sliderKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    sliderKnob.BorderSizePixel = 0
    sliderKnob.Parent = sliderBar
    
    local knobCorner = Instance.new("UICorner")
    knobCorner.CornerRadius = UDim.new(1, 0)
    knobCorner.Parent = sliderKnob
    
    local currentValue = defaultValue or minValue or 0
    local dragging = false
    
    -- Set initial position
    local initialPercent = (currentValue - minValue) / (maxValue - minValue)
    sliderFill.Size = UDim2.new(initialPercent, 0, 1, 0)
    sliderKnob.Position = UDim2.new(initialPercent, -8, 0.5, -8)
    
    local function updateSlider(input)
        local sliderPosition = sliderBar.AbsolutePosition.X
        local sliderSize = sliderBar.AbsoluteSize.X
        local mouseX = input.Position.X
        
        local relativeX = math.max(0, math.min(1, (mouseX - sliderPosition) / sliderSize))
        currentValue = minValue + (maxValue - minValue) * relativeX
        
        valueLabel.Text = tostring(math.floor(currentValue + 0.5))
        
        local fillTween = TweenService:Create(
            sliderFill,
            TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {Size = UDim2.new(relativeX, 0, 1, 0)}
        )
        
        local knobTween = TweenService:Create(
            sliderKnob,
            TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {Position = UDim2.new(relativeX, -8, 0.5, -8)}
        )
        
        fillTween:Play()
        knobTween:Play()
        
        if callback then
            callback(currentValue)
        end
    end
    
    sliderBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            updateSlider(input)
        end
    end)
    
    sliderBar.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            updateSlider(input)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
    
    return sliderFrame, currentValue
end

-- Create TextBox
function UILibrary:CreateTextBox(parent, placeholder, callback)
    local textBox = Instance.new("TextBox")
    textBox.Name = "UITextBox"
    textBox.Size = UDim2.new(1, -20, 0, 40)
    textBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    textBox.BorderSizePixel = 0
    textBox.Text = ""
    textBox.PlaceholderText = placeholder or "Enter text..."
    textBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    textBox.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)
    textBox.TextSize = 16
    textBox.Font = Enum.Font.Gotham
    textBox.TextXAlignment = Enum.TextXAlignment.Left
    textBox.Parent = parent
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = textBox
    
    local padding = Instance.new("UIPadding")
    padding.PaddingLeft = UDim.new(0, 12)
    padding.PaddingRight = UDim.new(0, 12)
    padding.Parent = textBox
    
    textBox.Focused:Connect(function()
        local tween = TweenService:Create(
            textBox,
            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = Color3.fromRGB(60, 60, 60)}
        )
        tween:Play()
    end)
    
    textBox.FocusLost:Connect(function(enterPressed)
        local tween = TweenService:Create(
            textBox,
            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = Color3.fromRGB(40, 40, 40)}
        )
        tween:Play()
        
        if callback and enterPressed then
            callback(textBox.Text)
        end
    end)
    
    return textBox
end

-- Create Dropdown
function UILibrary:CreateDropdown(parent, text, options, callback)
    local dropdownFrame = Instance.new("Frame")
    dropdownFrame.Name = "DropdownFrame"
    dropdownFrame.Size = UDim2.new(1, -20, 0, 40)
    dropdownFrame.BackgroundTransparency = 1
    dropdownFrame.Parent = parent
    
    local dropdownButton = Instance.new("TextButton")
    dropdownButton.Name = "DropdownButton"
    dropdownButton.Size = UDim2.new(1, 0, 1, 0)
    dropdownButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    dropdownButton.BorderSizePixel = 0
    dropdownButton.Text = text or "Select Option"
    dropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    dropdownButton.TextSize = 16
    dropdownButton.Font = Enum.Font.Gotham
    dropdownButton.TextXAlignment = Enum.TextXAlignment.Left
    dropdownButton.Parent = dropdownFrame
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = dropdownButton
    
    local padding = Instance.new("UIPadding")
    padding.PaddingLeft = UDim.new(0, 12)
    padding.PaddingRight = UDim.new(0, 40)
    padding.Parent = dropdownButton
    
    local arrow = Instance.new("TextLabel")
    arrow.Name = "Arrow"
    arrow.Size = UDim2.new(0, 20, 1, 0)
    arrow.Position = UDim2.new(1, -30, 0, 0)
    arrow.BackgroundTransparency = 1
    arrow.Text = "▼"
    arrow.TextColor3 = Color3.fromRGB(255, 255, 255)
    arrow.TextSize = 12
    arrow.TextXAlignment = Enum.TextXAlignment.Center
    arrow.TextYAlignment = Enum.TextYAlignment.Center
    arrow.Font = Enum.Font.Gotham
    arrow.Parent = dropdownButton
    
    local dropdownList = Instance.new("Frame")
    dropdownList.Name = "DropdownList"
    dropdownList.Size = UDim2.new(1, 0, 0, #options * 35)
    dropdownList.Position = UDim2.new(0, 0, 1, 5)
    dropdownList.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    dropdownList.BackgroundTransparency = 0.1
    dropdownList.BorderSizePixel = 0
    dropdownList.Visible = false
    dropdownList.ZIndex = 10
    dropdownList.Parent = dropdownFrame
    
    local listCorner = Instance.new("UICorner")
    listCorner.CornerRadius = UDim.new(0, 8)
    listCorner.Parent = dropdownList
    
    local listLayout = Instance.new("UIListLayout")
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Padding = UDim.new(0, 2)
    listLayout.Parent = dropdownList
    
    local isOpen = false
    local selectedOption = ""
    
    -- Create option buttons
    for i, option in ipairs(options) do
        local optionButton = Instance.new("TextButton")
        optionButton.Name = "Option" .. i
        optionButton.Size = UDim2.new(1, -4, 0, 30)
        optionButton.Position = UDim2.new(0, 2, 0, 0)
        optionButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        optionButton.BackgroundTransparency = 0.5
        optionButton.BorderSizePixel = 0
        optionButton.Text = option
        optionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        optionButton.TextSize = 14
        optionButton.Font = Enum.Font.Gotham
        optionButton.TextXAlignment = Enum.TextXAlignment.Left
        optionButton.Parent = dropdownList
        
        local optionCorner = Instance.new("UICorner")
        optionCorner.CornerRadius = UDim.new(0, 6)
        optionCorner.Parent = optionButton
        
        local optionPadding = Instance.new("UIPadding")
        optionPadding.PaddingLeft = UDim.new(0, 12)
        optionPadding.Parent = optionButton
        
        optionButton.MouseEnter:Connect(function()
            local tween = TweenService:Create(
                optionButton,
                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {BackgroundTransparency = 0.2}
            )
            tween:Play()
        end)
        
        optionButton.MouseLeave:Connect(function()
            local tween = TweenService:Create(
                optionButton,
                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {BackgroundTransparency = 0.5}
            )
            tween:Play()
        end)
        
        optionButton.MouseButton1Click:Connect(function()
            selectedOption = option
            dropdownButton.Text = option
            
            -- Close dropdown
            isOpen = false
            dropdownList.Visible = false
            
            local arrowTween = TweenService:Create(
                arrow,
                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {Rotation = 0}
            )
            arrowTween:Play()
            
            if callback then
                callback(option)
            end
        end)
    end
    
    dropdownButton.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        dropdownList.Visible = isOpen
        
        local arrowTween = TweenService:Create(
            arrow,
            TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {Rotation = isOpen and 180 or 0}
        )
        arrowTween:Play()
        
        if isOpen then
            local sizeTween = TweenService:Create(
                dropdownList,
                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {Size = UDim2.new(1, 0, 0, #options * 35)}
            )
            sizeTween:Play()
        end
    end)
    
    return dropdownFrame, selectedOption
end

-- Add Copy Discord Server button to settings
function UILibrary:AddSettingsContent(window)
    local discordButton = self:CreateButton(window.SettingsPanel, "Copy Discord Server", function()
        -- Copy discord link to clipboard (you can modify this URL)
        setclipboard("https://discord.gg/yourserver")
        
        -- Visual feedback
        local originalText = "Copy Discord Server"
        local button = window.SettingsPanel:FindFirstChild("UIButton")
        if button then
            button.Text = "Copied!"
            button.BackgroundColor3 = Color3.fromRGB(76, 175, 80)
            
            wait(1)
            
            button.Text = originalText
            button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        end
    end)
    
    -- Position the discord button
    discordButton.Position = UDim2.new(0, 10, 0, 60)
    
    return discordButton
end

-- Create Layout System
function UILibrary:CreateLayout(parent, layoutType)
    local layout
    
    if layoutType == "List" then
        layout = Instance.new("UIListLayout")
        layout.SortOrder = Enum.SortOrder.LayoutOrder
        layout.Padding = UDim.new(0, 10)
        layout.FillDirection = Enum.FillDirection.Vertical
        layout.HorizontalAlignment = Enum.HorizontalAlignment.Left
        layout.VerticalAlignment = Enum.VerticalAlignment.Top
    elseif layoutType == "Grid" then
        layout = Instance.new("UIGridLayout")
        layout.SortOrder = Enum.SortOrder.LayoutOrder
        layout.CellPadding = UDim2.new(0, 10, 0, 10)
        layout.CellSize = UDim2.new(0, 150, 0, 50)
        layout.FillDirection = Enum.FillDirection.Horizontal
        layout.HorizontalAlignment = Enum.HorizontalAlignment.Left
        layout.VerticalAlignment = Enum.VerticalAlignment.Top
    end
    
    if layout then
        layout.Parent = parent
    end
    
    return layout
end

-- Add panel titles and content
function UILibrary:SetupPanels(window)
    -- Left Panel Setup (Server Info)
    local leftTitle = Instance.new("TextLabel")
    leftTitle.Name = "PanelTitle"
    leftTitle.Size = UDim2.new(1, -20, 0, 30)
    leftTitle.Position = UDim2.new(0, 10, 0, 10)
    leftTitle.BackgroundTransparency = 1
    leftTitle.Text = "Server"
    leftTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    leftTitle.TextSize = 20
    leftTitle.TextXAlignment = Enum.TextXAlignment.Left
    leftTitle.Font = Enum.Font.GothamBold
    leftTitle.Parent = window.LeftPanel
    
    local leftSubtitle = Instance.new("TextLabel")
    leftSubtitle.Name = "PanelSubtitle"
    leftSubtitle.Size = UDim2.new(1, -20, 0, 20)
    leftSubtitle.Position = UDim2.new(0, 10, 0, 40)
    leftSubtitle.BackgroundTransparency = 1
    leftSubtitle.Text = "Information on the session you're currently in"
    leftSubtitle.TextColor3 = Color3.fromRGB(180, 180, 180)
    leftSubtitle.TextSize = 12
    leftSubtitle.TextXAlignment = Enum.TextXAlignment.Left
    leftSubtitle.Font = Enum.Font.Gotham
    leftSubtitle.Parent = window.LeftPanel
    
    -- Right Panel Setup (Friends)
    local rightTitle = Instance.new("TextLabel")
    rightTitle.Name = "PanelTitle"
    rightTitle.Size = UDim2.new(1, -20, 0, 30)
    rightTitle.Position = UDim2.new(0, 10, 0, 10)
    rightTitle.BackgroundTransparency = 1
    rightTitle.Text = "Friends"
    rightTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    rightTitle.TextSize = 20
    rightTitle.TextXAlignment = Enum.TextXAlignment.Left
    rightTitle.Font = Enum.Font.GothamBold
    rightTitle.Parent = window.RightPanel
    
    local rightSubtitle = Instance.new("TextLabel")
    rightSubtitle.Name = "PanelSubtitle"
    rightSubtitle.Size = UDim2.new(1, -20, 0, 20)
    rightSubtitle.Position = UDim2.new(0, 10, 0, 40)
    rightSubtitle.BackgroundTransparency = 1
    rightSubtitle.Text = "Find out what your friends are currently doing"
    rightSubtitle.TextColor3 = Color3.fromRGB(180, 180, 180)
    rightSubtitle.TextSize = 12
    rightSubtitle.TextXAlignment = Enum.TextXAlignment.Left
    rightSubtitle.Font = Enum.Font.Gotham
    rightSubtitle.Parent = window.RightPanel
    
    -- Create content areas with ScrollingFrames
    local leftContent = Instance.new("ScrollingFrame")
    leftContent.Name = "Content"
    leftContent.Size = UDim2.new(1, -20, 1, -80)
    leftContent.Position = UDim2.new(0, 10, 0, 70)
    leftContent.BackgroundTransparency = 1
    leftContent.BorderSizePixel = 0
    leftContent.ScrollBarThickness = 4
    leftContent.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)
    leftContent.CanvasSize = UDim2.new(0, 0, 0, 0)
    leftContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
    leftContent.Parent = window.LeftPanel
    
    local rightContent = Instance.new("ScrollingFrame")
    rightContent.Name = "Content"
    rightContent.Size = UDim2.new(1, -20, 1, -80)
    rightContent.Position = UDim2.new(0, 10, 0, 70)
    rightContent.BackgroundTransparency = 1
    rightContent.BorderSizePixel = 0
    rightContent.ScrollBarThickness = 4
    rightContent.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)
    rightContent.CanvasSize = UDim2.new(0, 0, 0, 0)
    rightContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
    rightContent.Parent = window.RightPanel
    
    -- Add layouts to content areas
    self:CreateLayout(leftContent, "List")
    self:CreateLayout(rightContent, "List")
    
    window.LeftContent = leftContent
    window.RightContent = rightContent
    
    return window
end

-- Create Info Display (like server stats)
function UILibrary:CreateInfoDisplay(parent, title, value, color)
    local infoFrame = Instance.new("Frame")
    infoFrame.Name = "InfoDisplay"
    infoFrame.Size = UDim2.new(1, -10, 0, 60)
    infoFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    infoFrame.BackgroundTransparency = 0.3
    infoFrame.BorderSizePixel = 0
    infoFrame.Parent = parent
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = infoFrame
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(1, -20, 0, 20)
    titleLabel.Position = UDim2.new(0, 10, 0, 10)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title or "Title"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextSize = 16
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Parent = infoFrame
    
    local valueLabel = Instance.new("TextLabel")
    valueLabel.Name = "Value"
    valueLabel.Size = UDim2.new(1, -20, 0, 20)
    valueLabel.Position = UDim2.new(0, 10, 0, 30)
    valueLabel.BackgroundTransparency = 1
    valueLabel.Text = tostring(value) or "Value"
    valueLabel.TextColor3 = color or Color3.fromRGB(200, 200, 200)
    valueLabel.TextSize = 14
    valueLabel.TextXAlignment = Enum.TextXAlignment.Left
    valueLabel.Font = Enum.Font.Gotham
    valueLabel.Parent = infoFrame
    
    return infoFrame
end

-- Example Usage Function
function UILibrary:CreateExample()
    -- Create main window
    local window = self:CreateWindow("Welcome home, GOGO", "What's up?")
    
    -- Setup panels with titles and content areas
    window = self:SetupPanels(window)
    
    -- Add server information displays
    self:CreateInfoDisplay(window.LeftContent, "Players", "4 playing")
    self:CreateInfoDisplay(window.LeftContent, "Maximum Players", "5 players can join this server")
    self:CreateInfoDisplay(window.LeftContent, "Latency", "121ms")
    self:CreateInfoDisplay(window.LeftContent, "Server Region", "Unable to retrieve region")
    
    -- Add some UI elements to demonstrate
    self:CreateButton(window.LeftContent, "Test Button", function()
        print("Button clicked!")
    end)
    
    self:CreateToggle(window.LeftContent, "Enable Feature", false, function(state)
        print("Toggle:", state)
    end)
    
    self:CreateSlider(window.LeftContent, "Volume", 0, 100, 50, function(value)
        print("Slider value:", value)
    end)
    
    self:CreateTextBox(window.LeftContent, "Enter your name...", function(text)
        print("Text entered:", text)
    end)
    
    self:CreateDropdown(window.LeftContent, "Select Region", {"US East", "US West", "Europe", "Asia"}, function(option)
        print("Selected:", option)
    end)
    
    -- Add friend status displays
    self:CreateInfoDisplay(window.RightContent, "In Server", "1 friends")
    self:CreateInfoDisplay(window.RightContent, "Online", "0 friends") 
    self:CreateInfoDisplay(window.RightContent, "Offline", "50 friends")
    self:CreateInfoDisplay(window.RightContent, "All", "50 friends")
    
    -- Add Discord button to settings
    self:AddSettingsContent(window)
    
    return window
end

-- Mobile compatibility checks
function UILibrary:IsMobile()
    return UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled
end

-- Adjust UI for mobile
function UILibrary:OptimizeForMobile(window)
    if self:IsMobile() then
        -- Make UI elements larger for touch
        window.MainFrame.Size = UDim2.new(0.95, 0, 0.8, 0)
        window.MainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
        window.MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
        
        -- Adjust grid layout for mobile
        local leftContent = window.LeftContent
        local rightContent = window.RightContent
        
        if leftContent and rightContent then
            -- Stack panels vertically on mobile
            window.LeftPanel.Size = UDim2.new(1, 0, 0.5, -15)
            window.RightPanel.Size = UDim2.new(1, 0, 0.5, -15)
            window.RightPanel.Position = UDim2.new(0, 0, 0.5, 15)
        end
    end
end

return UILibrary

--[[
USAGE EXAMPLE:

local UILib = require(script.UILibrary) -- Adjust path as needed

-- Create and show example UI
local window = UILib:CreateExample()

-- Or create custom UI
local customWindow = UILib:CreateWindow("My Custom UI", "Description here")
customWindow = UILib:SetupPanels(customWindow)

-- Add custom elements
UILib:CreateButton(customWindow.LeftContent, "My Button", function()
    print("Custom button clicked!")
end)

UILib:CreateToggle(customWindow.LeftContent, "My Toggle", true, function(state)
    print("My toggle state:", state)
end)

-- Add settings content
UILib:AddSettingsContent(customWindow)

-- Optimize for mobile if needed
UILib:OptimizeForMobile(customWindow)
--]]
